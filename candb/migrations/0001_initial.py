# Generated by Django 5.1.1 on 2024-10-03 11:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.serializers.json
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, help_text='Phone Number', max_length=22)),
                ('image', models.ImageField(blank=True, default='default.jpg', null=True, upload_to='profile_pics')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.CharField(editable=False, help_text='Unique Order ID, same across databases', max_length=42, primary_key=True, serialize=False, unique=True)),
                ('orderTime', models.DateTimeField(help_text='Order Time')),
                ('overrideCost', models.DecimalField(decimal_places=2, default=None, help_text='Override Cost', max_digits=10, null=True)),
                ('totalCost', models.DecimalField(decimal_places=2, help_text='Order Total', max_digits=10, null=True)),
                ('notes', models.TextField(default=None, help_text='Order Notes', max_length=500, null=True)),
                ('user', models.ForeignKey(help_text='User ID', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'db_table_comment': 'Orders',
                'ordering': ['-orderTime', 'id'],
                'permissions': [('view_all_orders', 'Can view orders regardless of its owner'), ('edit_all_orders', 'Can edit orders regardless of its owner'), ('delete_all_orders', 'Can delete orders regardless of its owner'), ('add_all_orders', 'Can add orders regardless of its owner'), ('edit_all_but_overridecost', 'Can edit orders regardless of its owner, but cannot override the cost')],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.CharField(help_text='Unique Product ID, same across databases', max_length=44, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(help_text='Product Name', max_length=100)),
                ('price', models.DecimalField(decimal_places=2, help_text='Product Price', max_digits=10)),
                ('description', models.TextField(help_text='Product Description', max_length=1024, null=True)),
                ('image', models.ImageField(help_text='Product Image', null=True, upload_to='product_images')),
                ('physicalStock', models.PositiveIntegerField(help_text='Product Physical Stock', null=True)),
                ('reservedStock', models.PositiveIntegerField(default=0, help_text='Product Reserved Stock', null=True)),
                ('availability', models.JSONField(default=None, encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Product Availability Configuration', null=True)),
                ('notes', models.TextField(default=None, help_text='Product Notes', max_length=500, null=True)),
                ('tags', models.JSONField(blank=True, help_text='Product Tags', max_length=64)),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table_comment': 'Product',
                'ordering': ['name', 'id'],
                'permissions': [],
                'indexes': [models.Index(fields=['id'], name='CanDB_Product_OLD_ID_Index')],
                'constraints': [models.CheckConstraint(condition=models.Q(('id__startswith', 'PRODUCT-')), name='CanDB_Product_ID_Prefix', violation_error_code='PRODUCT-ID-1', violation_error_message="Product ID must start with 'PRODUCT-'"), models.CheckConstraint(condition=models.Q(('id__len', 44)), name='CanDB_Product_ID_Len', violation_error_code='PRODUCT-ID-2', violation_error_message='Product ID must be 44 characters long'), models.CheckConstraint(condition=models.Q(('physicalStock__isnull', False), models.Q(('physicalStock__isnull', True), models.Q(('reservedStock__isnull', True), _negated=True)), _connector='OR'), name='CanDB_Product_Stock_Null', violation_error_code='PRODUCT-STOCK-1', violation_error_message='If physical stock is None, reserved stock must be None'), models.CheckConstraint(condition=models.Q(('reservedStock__lte', models.F('physicalStock'))), name='CanDB_Product_Stock_Reserve', violation_error_code='PRODUCT-STOCK-2', violation_error_message='Reserved stock must be smaller or equal to physical stock')],
            },
        ),
        migrations.CreateModel(
            name='OrderLine',
            fields=[
                ('id', models.CharField(help_text='Unique OrderLine ID, same across databases', max_length=46, primary_key=True, serialize=False, unique=True)),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Quantity')),
                ('quantityReserved', models.PositiveIntegerField(default=0, help_text='Quantity Reserved')),
                ('persistentCost', models.DecimalField(decimal_places=2, help_text='Persistent Cost', max_digits=10, null=True)),
                ('itemCost', models.DecimalField(decimal_places=2, default=0, help_text='Total Cost', max_digits=10, null=True)),
                ('forcePrice', models.DecimalField(decimal_places=2, default=None, help_text='Force Price of Entire OrderLine', max_digits=10, null=True)),
                ('status', models.CharField(choices=[('Pending', 'P'), ('Open', 'O'), ('Waiting_for_Balance', 'W'), ('Confirmed', 'C'), ('In_Production', 'I'), ('Delivered', 'D'), ('Returned', 'R'), ('Cancelled', 'X'), ('Locked', 'L'), ('Standing_by_for_Stock', 'S')], default='P', help_text='Order Status', max_length=21, null=True)),
                ('notes', models.TextField(default=None, help_text='Order Line Notes', max_length=500, null=True)),
                ('availabilityID', models.IntegerField(default=-1, help_text='ID of Stock Configuration used in linked Product for availability', null=True)),
                ('linkedOrder', models.ForeignKey(default=-1, help_text='Order ID', on_delete=django.db.models.deletion.CASCADE, to='candb.order')),
                ('linkedProduct', models.ForeignKey(default=-1, help_text='Product ID', on_delete=django.db.models.deletion.CASCADE, to='candb.product')),
            ],
            options={
                'verbose_name': 'OrderLine',
                'verbose_name_plural': 'OrderLines',
                'db_table_comment': 'Order Lines',
                'ordering': ['id'],
                'permissions': [('view_all_orderlines', 'Can view orderlines regardless of its owner'), ('edit_all_orderlines', 'Can edit orderlines regardless of its owner'), ('delete_all_orderlines', 'Can delete orderlines regardless of its owner'), ('add_all_orderlines', 'Can add orderlines regardless of its owner')],
            },
        ),
        migrations.CreateModel(
            name='Product_old',
            fields=[
                ('id', models.CharField(help_text='Unique Product ID, same across databases', max_length=44, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(help_text='Product Name', max_length=100)),
                ('price', models.DecimalField(decimal_places=2, help_text='Product Price', max_digits=10)),
                ('description', models.TextField(help_text='Product Description', max_length=1024, null=True)),
                ('image', models.ImageField(help_text='Product Image', null=True, upload_to='product_images')),
                ('physicalStock', models.PositiveIntegerField(help_text='Product Physical Stock', null=True)),
                ('reservedStock', models.PositiveIntegerField(default=0, help_text='Product Reserved Stock', null=True)),
                ('rawAvailability', models.BinaryField(default=None, help_text='Product Availability Configuration', null=True)),
                ('notes', models.TextField(default=None, help_text='Product Notes', max_length=500, null=True)),
                ('tags', models.JSONField(blank=True, help_text='Product Tags', max_length=64)),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table_comment': 'Product',
                'ordering': ['name', 'id'],
                'permissions': [],
                'indexes': [models.Index(fields=['id'], name='CanDB_Product_ID_Index')],
                'constraints': [models.CheckConstraint(condition=models.Q(('id__startswith', 'PRODUCT_OLD-')), name='CanDB_PRODUCT_OLD_ID_Prefix', violation_error_code='PRODUCT_OLD-ID-1', violation_error_message="PRODUCT_OLD ID must start with 'PRODUCT_OLD-'"), models.CheckConstraint(condition=models.Q(('id__len', 44)), name='CanDB_PRODUCT_OLD_ID_Len', violation_error_code='PRODUCT_OLD-ID-2', violation_error_message='PRODUCT_OLD ID must be 44 characters long'), models.CheckConstraint(condition=models.Q(('physicalStock__isnull', False), models.Q(('physicalStock__isnull', True), models.Q(('reservedStock__isnull', True), _negated=True)), _connector='OR'), name='CanDB_PRODUCT_OLD_Stock_Null', violation_error_code='PRODUCT_OLD-STOCK-1', violation_error_message='If physical stock is None, reserved stock must be None'), models.CheckConstraint(condition=models.Q(('reservedStock__lte', models.F('physicalStock'))), name='CanDB_PRODUCT_OLD_Stock_Reserve', violation_error_code='PRODUCT_OLD-STOCK-2', violation_error_message='Reserved stock must be smaller or equal to physical stock')],
            },
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['id'], name='CanDB_Order_ID_Index'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.UniqueConstraint(fields=('id',), name='CanDB_Order_ID_User_Unique'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('totalCost__gte', 0)), name='CanDB_Order_TotalCost_NonNegative', violation_error_code='ORDER-TOTALCOST-1', violation_error_message='Total cost of an order cannot negative'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('overrideCost__gte', 0)), name='CanDB_Order_OverrideCost_NonNegative', violation_error_code='ORDER-OVERRIDE-1', violation_error_message='Total cost of an order cannot negative'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('id__startswith', 'ORDER-')), name='CanDB_Order_ID_Prefix', violation_error_code='ORDER-ID-1', violation_error_message="Order ID must start with 'ORDER-'"),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('id__len', 42)), name='CanDB_Order_ID_Len', violation_error_code='ORDER-ID-2', violation_error_message='Order ID must be 42 characters long'),
        ),
        migrations.AddIndex(
            model_name='orderline',
            index=models.Index(fields=['id', 'linkedOrder'], name='CanDB_OrderLine_ID_Index'),
        ),
        migrations.AddConstraint(
            model_name='orderline',
            constraint=models.UniqueConstraint(fields=('id',), name='CanDB_OrderLines_ID_User_Unique'),
        ),
        migrations.AddConstraint(
            model_name='orderline',
            constraint=models.CheckConstraint(condition=models.Q(('id__len', 46)), name='CanDB_OrderLine_ID_Len', violation_error_code='ORDERLINE-ID-1', violation_error_message='OrderLine ID must be 46 characters long'),
        ),
        migrations.AddConstraint(
            model_name='orderline',
            constraint=models.CheckConstraint(condition=models.Q(('quantityReserved__lte', models.F('quantity'))), name='CanDB_OrderLine_Quantity_Reserve', violation_error_code='ORDERLINE-QUANTITY-1', violation_error_message='Reserved quantity must be smaller or equal to quantity'),
        ),
        migrations.AddConstraint(
            model_name='orderline',
            constraint=models.CheckConstraint(condition=models.Q(('persistentCost__gte', 0)), name='CanDB_OrderLine_PersistentCost_NonNegative', violation_error_code='ORDERLINE-PERSISTENTCOST-1', violation_error_message='Persistent cost must not be negative'),
        ),
        migrations.AddConstraint(
            model_name='orderline',
            constraint=models.CheckConstraint(condition=models.Q(('itemCost__gte', 0)), name='CanDB_OrderLine_ItemCost_NonNegative', violation_error_code='ORDERLINE-ITEMCOST-1', violation_error_message='Item cost must not be negative'),
        ),
        migrations.AddConstraint(
            model_name='orderline',
            constraint=models.CheckConstraint(condition=models.Q(('forcePrice__gte', 0)), name='CanDB_OrderLine_ForcePrice_NonNegative', violation_error_code='ORDERLINE-FORCEPRICE-1', violation_error_message='Forced price must not be negative'),
        ),
        migrations.AddConstraint(
            model_name='orderline',
            constraint=models.CheckConstraint(condition=models.Q(('availabilityID__gte', -1)), name='CanDB_OrderLine_AvailabilityID_NonNegative', violation_error_code='ORDERLINE-AVAILABILITYID-1', violation_error_message='Availability ID must not be below -1'),
        ),
    ]
